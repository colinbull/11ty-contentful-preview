const { EleventyServerless } = require("@11ty/eleventy");

const contentful = require("contentful");
const client = contentful.createClient({
    // This is the space ID. A space is like a project folder in Contentful terms
    space: process.env.CTFL_SPACE,
    // This is the access token for this space. Normally you get both ID and the token in the Contentful web app
    accessToken: process.env.CTFL_PREVIEW_ACCESSTOKEN,
    host: process.env.CTFL_PREVIEW_HOST
});
// Explicit dependencies for the bundler from config file and global data.
// The file is generated by the Eleventy Serverless Bundler Plugin.
require("./eleventy-bundler-modules.js");

async function getContentfulPage(id) {
  return client.getEntry(id).then(function(response) {
    response.fields.date= new Date(response.sys.updatedAt);
    return response.fields;
  })
  .catch(console.error);
}

async function handler(event) {
  var requestUrl = new URL(event.rawUrl);
  var pathParts = requestUrl.pathname.split('/');
  var id = pathParts[pathParts.length - 2];
  console.log(id);
  var components = await getContentfulPage(id)
  
  let elev = new EleventyServerless("dynamic", {
    path: requestUrl.pathname,
    query: event.queryStringParameters,
    functionsDir: "./netlify/functions/",
    config: function(eleventyConfig) {
      if(components) {
        eleventyConfig.addGlobalData("contentful", components);
      }
    }
  });

  try {

    let [page] = await elev.getOutput();
    // If you want some of the data cascade available in `page.data`, use `eleventyConfig.dataFilterSelectors`.
    // Read more: https://www.11ty.dev/docs/config/#data-filter-selectors

    return {
      statusCode: 200,
      headers: {
        "Content-Type": "text/html; charset=UTF-8",
      },
      body: page.content,
    };
  } catch (error) {
    // Only console log for matching serverless paths
    // (otherwise you’ll see a bunch of BrowserSync 404s for non-dynamic URLs during --serve)
    if (elev.isServerlessUrl(event.path)) {
      console.log("Serverless Error:", error);
    }

    return {
      statusCode: error.httpStatusCode || 500,
      body: JSON.stringify(
        {
          error: error.message,
        },
        null,
        2
      ),
    };
  }
}

// Choose one:
// * Runs on each request: AWS Lambda, Netlify Function
// * Runs on first request only: Netlify On-demand Builder
//    1. Don’t forget to `npm install @netlify/functions`
//    2. Also use `redirects: "netlify-toml-builders"` in your config file’s serverless bundler options:
//       https://www.11ty.dev/docs/plugins/serverless/#bundler-options

exports.handler = handler;

//const { builder } = require("@netlify/functions");
//exports.handler = builder(handler);
